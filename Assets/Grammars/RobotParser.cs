//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Robot.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class RobotParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, WS=63, IF=64, NEWLINE=65;
	public const int
		RULE_code = 0, RULE_command = 1, RULE_moveCommand = 2, RULE_move = 3, 
		RULE_moveCommandInt = 4, RULE_moveInt = 5, RULE_rotateCommand = 6, RULE_rotate = 7, 
		RULE_jumpCommand = 8, RULE_jump = 9, RULE_jumpCommandInt = 10, RULE_jumpInt = 11, 
		RULE_ifFlag = 12, RULE_ifStatement = 13, RULE_whileFlag = 14, RULE_forFlag = 15, 
		RULE_forLoop = 16, RULE_whileLoop = 17, RULE_pickBomb = 18, RULE_dropBomb = 19, 
		RULE_pickDirection = 20, RULE_drop = 21, RULE_bracketOpen = 22, RULE_bracketClose = 23, 
		RULE_sum = 24, RULE_semi = 25, RULE_number = 26, RULE_int1 = 27, RULE_int2 = 28, 
		RULE_conditionB = 29, RULE_directionB = 30, RULE_while = 31, RULE_for = 32, 
		RULE_scanCommand = 33, RULE_scanCommand2 = 34, RULE_condition = 35, RULE_barrier = 36, 
		RULE_int = 37;
	public static readonly string[] ruleNames = {
		"code", "command", "moveCommand", "move", "moveCommandInt", "moveInt", 
		"rotateCommand", "rotate", "jumpCommand", "jump", "jumpCommandInt", "jumpInt", 
		"ifFlag", "ifStatement", "whileFlag", "forFlag", "forLoop", "whileLoop", 
		"pickBomb", "dropBomb", "pickDirection", "drop", "bracketOpen", "bracketClose", 
		"sum", "semi", "number", "int1", "int2", "conditionB", "directionB", "while", 
		"for", "scanCommand", "scanCommand2", "condition", "barrier", "int"
	};

	private static readonly string[] _LiteralNames = {
		null, "'moveForward()'", "'moveBackward()'", "'moveRight()'", "'moveLeft()'", 
		"'moveForward'", "'moveBackward'", "'moveRight'", "'moveLeft'", "'rotateLeft()'", 
		"'rotateRight()'", "'jumpForward()'", "'jumpRight()'", "'jumpLeft()'", 
		"'jumpBackward()'", "'jumpForward'", "'jumpRight'", "'jumpLeft'", "'jumpBackward'", 
		"'{'", "'}'", "'pickForward()'", "'pickBackward()'", "'pickRight()'", 
		"'pickLeft()'", "'drop()'", "'('", "')'", "'='", "';'", "'number'", "'i'", 
		"'j'", "'0'", "'1'", "'2'", "'3'", "'4'", "'5'", "'6'", "'7'", "'8'", 
		"'9'", "'<'", "'>'", "'<='", "'>='", "'++'", "'--'", "'while'", "'for'", 
		"'scanForward()'", "'scanBackward()'", "'scanRight()'", "'scanLeft()'", 
		"'Forward()'", "'Backward()'", "'Right()'", "'Left()'", "'=='", "'!='", 
		"'obstacle'", "'hole'", null, "'if'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "WS", "IF", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Robot.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		public RobotCompiler Compiler = new RobotCompiler();

	public RobotParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CodeContext : ParserRuleContext {
		public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 0, RULE_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 76; command();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( ((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (T__0 - 1)) | (1L << (T__1 - 1)) | (1L << (T__2 - 1)) | (1L << (T__3 - 1)) | (1L << (T__4 - 1)) | (1L << (T__5 - 1)) | (1L << (T__6 - 1)) | (1L << (T__7 - 1)) | (1L << (T__8 - 1)) | (1L << (T__9 - 1)) | (1L << (T__10 - 1)) | (1L << (T__11 - 1)) | (1L << (T__12 - 1)) | (1L << (T__13 - 1)) | (1L << (T__14 - 1)) | (1L << (T__15 - 1)) | (1L << (T__16 - 1)) | (1L << (T__17 - 1)) | (1L << (T__20 - 1)) | (1L << (T__21 - 1)) | (1L << (T__22 - 1)) | (1L << (T__23 - 1)) | (1L << (T__24 - 1)) | (1L << (T__25 - 1)) | (1L << (T__48 - 1)) | (1L << (T__49 - 1)) | (1L << (IF - 1)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public MoveCommandContext moveCommand() {
			return GetRuleContext<MoveCommandContext>(0);
		}
		public MoveCommandIntContext moveCommandInt() {
			return GetRuleContext<MoveCommandIntContext>(0);
		}
		public RotateCommandContext rotateCommand() {
			return GetRuleContext<RotateCommandContext>(0);
		}
		public JumpCommandIntContext jumpCommandInt() {
			return GetRuleContext<JumpCommandIntContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public IfFlagContext ifFlag() {
			return GetRuleContext<IfFlagContext>(0);
		}
		public JumpCommandContext jumpCommand() {
			return GetRuleContext<JumpCommandContext>(0);
		}
		public WhileFlagContext whileFlag() {
			return GetRuleContext<WhileFlagContext>(0);
		}
		public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		public ForFlagContext forFlag() {
			return GetRuleContext<ForFlagContext>(0);
		}
		public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		public PickBombContext pickBomb() {
			return GetRuleContext<PickBombContext>(0);
		}
		public DropBombContext dropBomb() {
			return GetRuleContext<DropBombContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 2, RULE_command);
		try {
			State = 94;
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 81; moveCommand();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82; moveCommandInt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 83; rotateCommand();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 84; jumpCommandInt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 85; ifStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 86; ifFlag();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 87; jumpCommand();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 88; whileFlag();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 89; whileLoop();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 90; forFlag();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 91; forLoop();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 92; pickBomb();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 93; dropBomb();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveCommandContext : ParserRuleContext {
		public MoveContext _move;
		public MoveContext move() {
			return GetRuleContext<MoveContext>(0);
		}
		public MoveCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterMoveCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitMoveCommand(this);
		}
	}

	[RuleVersion(0)]
	public MoveCommandContext moveCommand() {
		MoveCommandContext _localctx = new MoveCommandContext(Context, State);
		EnterRule(_localctx, 4, RULE_moveCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; _localctx._move = move();
			 Compiler.AddMoveCommand((_localctx._move!=null?TokenStream.GetText(_localctx._move.Start,_localctx._move.Stop):null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveContext : ParserRuleContext {
		public MoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_move; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterMove(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitMove(this);
		}
	}

	[RuleVersion(0)]
	public MoveContext move() {
		MoveContext _localctx = new MoveContext(Context, State);
		EnterRule(_localctx, 6, RULE_move);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveCommandIntContext : ParserRuleContext {
		public MoveIntContext _moveInt;
		public IntContext _int;
		public MoveIntContext moveInt() {
			return GetRuleContext<MoveIntContext>(0);
		}
		public BracketOpenContext bracketOpen() {
			return GetRuleContext<BracketOpenContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public BracketCloseContext bracketClose() {
			return GetRuleContext<BracketCloseContext>(0);
		}
		public MoveCommandIntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveCommandInt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterMoveCommandInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitMoveCommandInt(this);
		}
	}

	[RuleVersion(0)]
	public MoveCommandIntContext moveCommandInt() {
		MoveCommandIntContext _localctx = new MoveCommandIntContext(Context, State);
		EnterRule(_localctx, 8, RULE_moveCommandInt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; _localctx._moveInt = moveInt();
			State = 102; bracketOpen();
			State = 103; _localctx._int = @int();
			State = 104; bracketClose();
			 Compiler.AddMoveIntCommand((_localctx._moveInt!=null?TokenStream.GetText(_localctx._moveInt.Start,_localctx._moveInt.Stop):null),(_localctx._int!=null?TokenStream.GetText(_localctx._int.Start,_localctx._int.Stop):null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveIntContext : ParserRuleContext {
		public MoveIntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveInt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterMoveInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitMoveInt(this);
		}
	}

	[RuleVersion(0)]
	public MoveIntContext moveInt() {
		MoveIntContext _localctx = new MoveIntContext(Context, State);
		EnterRule(_localctx, 10, RULE_moveInt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RotateCommandContext : ParserRuleContext {
		public RotateContext _rotate;
		public RotateContext rotate() {
			return GetRuleContext<RotateContext>(0);
		}
		public RotateCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rotateCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterRotateCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitRotateCommand(this);
		}
	}

	[RuleVersion(0)]
	public RotateCommandContext rotateCommand() {
		RotateCommandContext _localctx = new RotateCommandContext(Context, State);
		EnterRule(_localctx, 12, RULE_rotateCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; _localctx._rotate = rotate();
			Compiler.AddRotateCommand((_localctx._rotate!=null?TokenStream.GetText(_localctx._rotate.Start,_localctx._rotate.Stop):null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RotateContext : ParserRuleContext {
		public RotateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rotate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterRotate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitRotate(this);
		}
	}

	[RuleVersion(0)]
	public RotateContext rotate() {
		RotateContext _localctx = new RotateContext(Context, State);
		EnterRule(_localctx, 14, RULE_rotate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			_la = TokenStream.La(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpCommandContext : ParserRuleContext {
		public JumpContext _jump;
		public JumpContext jump() {
			return GetRuleContext<JumpContext>(0);
		}
		public JumpCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterJumpCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitJumpCommand(this);
		}
	}

	[RuleVersion(0)]
	public JumpCommandContext jumpCommand() {
		JumpCommandContext _localctx = new JumpCommandContext(Context, State);
		EnterRule(_localctx, 16, RULE_jumpCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; _localctx._jump = jump();
			Compiler.AddJumpCommand((_localctx._jump!=null?TokenStream.GetText(_localctx._jump.Start,_localctx._jump.Stop):null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpContext : ParserRuleContext {
		public JumpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterJump(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitJump(this);
		}
	}

	[RuleVersion(0)]
	public JumpContext jump() {
		JumpContext _localctx = new JumpContext(Context, State);
		EnterRule(_localctx, 18, RULE_jump);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpCommandIntContext : ParserRuleContext {
		public JumpIntContext _jumpInt;
		public IntContext _int;
		public JumpIntContext jumpInt() {
			return GetRuleContext<JumpIntContext>(0);
		}
		public BracketOpenContext bracketOpen() {
			return GetRuleContext<BracketOpenContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public BracketCloseContext bracketClose() {
			return GetRuleContext<BracketCloseContext>(0);
		}
		public JumpCommandIntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpCommandInt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterJumpCommandInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitJumpCommandInt(this);
		}
	}

	[RuleVersion(0)]
	public JumpCommandIntContext jumpCommandInt() {
		JumpCommandIntContext _localctx = new JumpCommandIntContext(Context, State);
		EnterRule(_localctx, 20, RULE_jumpCommandInt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; _localctx._jumpInt = jumpInt();
			State = 120; bracketOpen();
			State = 121; _localctx._int = @int();
			State = 122; bracketClose();
			 Compiler.AddJumpIntCommand((_localctx._jumpInt!=null?TokenStream.GetText(_localctx._jumpInt.Start,_localctx._jumpInt.Stop):null),(_localctx._int!=null?TokenStream.GetText(_localctx._int.Start,_localctx._int.Stop):null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpIntContext : ParserRuleContext {
		public JumpIntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpInt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterJumpInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitJumpInt(this);
		}
	}

	[RuleVersion(0)]
	public JumpIntContext jumpInt() {
		JumpIntContext _localctx = new JumpIntContext(Context, State);
		EnterRule(_localctx, 22, RULE_jumpInt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfFlagContext : ParserRuleContext {
		public IToken _IF;
		public ITerminalNode IF() { return GetToken(RobotParser.IF, 0); }
		public IfFlagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifFlag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterIfFlag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitIfFlag(this);
		}
	}

	[RuleVersion(0)]
	public IfFlagContext ifFlag() {
		IfFlagContext _localctx = new IfFlagContext(Context, State);
		EnterRule(_localctx, 24, RULE_ifFlag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; _localctx._IF = Match(IF);
			Compiler.AddCheckIfCommand((_localctx._IF!=null?_localctx._IF.Text:null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ScanCommandContext _scanCommand;
		public ConditionContext _condition;
		public BarrierContext _barrier;
		public BracketOpenContext bracketOpen() {
			return GetRuleContext<BracketOpenContext>(0);
		}
		public ScanCommandContext scanCommand() {
			return GetRuleContext<ScanCommandContext>(0);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public BarrierContext barrier() {
			return GetRuleContext<BarrierContext>(0);
		}
		public BracketCloseContext bracketClose() {
			return GetRuleContext<BracketCloseContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; bracketOpen();
			State = 131; _localctx._scanCommand = scanCommand();
			State = 132; _localctx._condition = condition();
			State = 133; _localctx._barrier = barrier();
			State = 134; bracketClose();
			Compiler.AddIfCommand((_localctx._scanCommand!=null?TokenStream.GetText(_localctx._scanCommand.Start,_localctx._scanCommand.Stop):null), (_localctx._condition!=null?TokenStream.GetText(_localctx._condition.Start,_localctx._condition.Stop):null), (_localctx._barrier!=null?TokenStream.GetText(_localctx._barrier.Start,_localctx._barrier.Stop):null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileFlagContext : ParserRuleContext {
		public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		public WhileFlagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileFlag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterWhileFlag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitWhileFlag(this);
		}
	}

	[RuleVersion(0)]
	public WhileFlagContext whileFlag() {
		WhileFlagContext _localctx = new WhileFlagContext(Context, State);
		EnterRule(_localctx, 28, RULE_whileFlag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; @while();
			Compiler.AddCheckWhileCommand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForFlagContext : ParserRuleContext {
		public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		public ForFlagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forFlag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterForFlag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitForFlag(this);
		}
	}

	[RuleVersion(0)]
	public ForFlagContext forFlag() {
		ForFlagContext _localctx = new ForFlagContext(Context, State);
		EnterRule(_localctx, 30, RULE_forFlag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; @for();
			Compiler.AddCheckForCommand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		public Int1Context _int1;
		public ConditionBContext _conditionB;
		public Int2Context _int2;
		public DirectionBContext _directionB;
		public CodeContext _code;
		public BracketOpenContext bracketOpen() {
			return GetRuleContext<BracketOpenContext>(0);
		}
		public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public Int1Context int1() {
			return GetRuleContext<Int1Context>(0);
		}
		public SemiContext[] semi() {
			return GetRuleContexts<SemiContext>();
		}
		public SemiContext semi(int i) {
			return GetRuleContext<SemiContext>(i);
		}
		public ConditionBContext conditionB() {
			return GetRuleContext<ConditionBContext>(0);
		}
		public Int2Context int2() {
			return GetRuleContext<Int2Context>(0);
		}
		public DirectionBContext directionB() {
			return GetRuleContext<DirectionBContext>(0);
		}
		public BracketCloseContext bracketClose() {
			return GetRuleContext<BracketCloseContext>(0);
		}
		public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterForLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitForLoop(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 32, RULE_forLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; bracketOpen();
			State = 144; number();
			State = 145; sum();
			State = 146; _localctx._int1 = int1();
			State = 147; semi();
			State = 148; number();
			State = 149; _localctx._conditionB = conditionB();
			State = 150; _localctx._int2 = int2();
			State = 151; semi();
			State = 152; number();
			State = 153; _localctx._directionB = directionB();
			State = 154; bracketClose();
			State = 155; Match(T__18);
			State = 156; _localctx._code = code();
			State = 157; Match(T__19);
			 Compiler.AddForCommand((_localctx._int1!=null?TokenStream.GetText(_localctx._int1.Start,_localctx._int1.Stop):null),(_localctx._conditionB!=null?TokenStream.GetText(_localctx._conditionB.Start,_localctx._conditionB.Stop):null), (_localctx._int2!=null?TokenStream.GetText(_localctx._int2.Start,_localctx._int2.Stop):null), (_localctx._directionB!=null?TokenStream.GetText(_localctx._directionB.Start,_localctx._directionB.Stop):null) ,(_localctx._code!=null?TokenStream.GetText(_localctx._code.Start,_localctx._code.Stop):null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		public ScanCommand2Context _scanCommand2;
		public ConditionContext _condition;
		public BarrierContext _barrier;
		public CodeContext _code;
		public BracketOpenContext bracketOpen() {
			return GetRuleContext<BracketOpenContext>(0);
		}
		public ScanCommand2Context scanCommand2() {
			return GetRuleContext<ScanCommand2Context>(0);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public BarrierContext barrier() {
			return GetRuleContext<BarrierContext>(0);
		}
		public BracketCloseContext bracketClose() {
			return GetRuleContext<BracketCloseContext>(0);
		}
		public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterWhileLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitWhileLoop(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 34, RULE_whileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; bracketOpen();
			State = 161; _localctx._scanCommand2 = scanCommand2();
			State = 162; _localctx._condition = condition();
			State = 163; _localctx._barrier = barrier();
			State = 164; bracketClose();
			State = 165; Match(T__18);
			State = 166; _localctx._code = code();
			State = 167; Match(T__19);
			 Compiler.AddWhileCommand((_localctx._scanCommand2!=null?TokenStream.GetText(_localctx._scanCommand2.Start,_localctx._scanCommand2.Stop):null),(_localctx._condition!=null?TokenStream.GetText(_localctx._condition.Start,_localctx._condition.Stop):null), (_localctx._barrier!=null?TokenStream.GetText(_localctx._barrier.Start,_localctx._barrier.Stop):null), (_localctx._code!=null?TokenStream.GetText(_localctx._code.Start,_localctx._code.Stop):null) ); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PickBombContext : ParserRuleContext {
		public PickDirectionContext _pickDirection;
		public PickDirectionContext pickDirection() {
			return GetRuleContext<PickDirectionContext>(0);
		}
		public PickBombContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pickBomb; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterPickBomb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitPickBomb(this);
		}
	}

	[RuleVersion(0)]
	public PickBombContext pickBomb() {
		PickBombContext _localctx = new PickBombContext(Context, State);
		EnterRule(_localctx, 36, RULE_pickBomb);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; _localctx._pickDirection = pickDirection();
			Compiler.AddPickCommand((_localctx._pickDirection!=null?TokenStream.GetText(_localctx._pickDirection.Start,_localctx._pickDirection.Stop):null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropBombContext : ParserRuleContext {
		public DropContext drop() {
			return GetRuleContext<DropContext>(0);
		}
		public DropBombContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropBomb; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterDropBomb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitDropBomb(this);
		}
	}

	[RuleVersion(0)]
	public DropBombContext dropBomb() {
		DropBombContext _localctx = new DropBombContext(Context, State);
		EnterRule(_localctx, 38, RULE_dropBomb);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; drop();
			Compiler.AddDropCommand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PickDirectionContext : ParserRuleContext {
		public PickDirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pickDirection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterPickDirection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitPickDirection(this);
		}
	}

	[RuleVersion(0)]
	public PickDirectionContext pickDirection() {
		PickDirectionContext _localctx = new PickDirectionContext(Context, State);
		EnterRule(_localctx, 40, RULE_pickDirection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropContext : ParserRuleContext {
		public DropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterDrop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitDrop(this);
		}
	}

	[RuleVersion(0)]
	public DropContext drop() {
		DropContext _localctx = new DropContext(Context, State);
		EnterRule(_localctx, 42, RULE_drop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; Match(T__24);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketOpenContext : ParserRuleContext {
		public BracketOpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketOpen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterBracketOpen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitBracketOpen(this);
		}
	}

	[RuleVersion(0)]
	public BracketOpenContext bracketOpen() {
		BracketOpenContext _localctx = new BracketOpenContext(Context, State);
		EnterRule(_localctx, 44, RULE_bracketOpen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(T__25);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketCloseContext : ParserRuleContext {
		public BracketCloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketClose; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterBracketClose(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitBracketClose(this);
		}
	}

	[RuleVersion(0)]
	public BracketCloseContext bracketClose() {
		BracketCloseContext _localctx = new BracketCloseContext(Context, State);
		EnterRule(_localctx, 46, RULE_bracketClose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(Context, State);
		EnterRule(_localctx, 48, RULE_sum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(T__27);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SemiContext : ParserRuleContext {
		public SemiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semi; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterSemi(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitSemi(this);
		}
	}

	[RuleVersion(0)]
	public SemiContext semi() {
		SemiContext _localctx = new SemiContext(Context, State);
		EnterRule(_localctx, 50, RULE_semi);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(T__28);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 52, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__29) | (1L << T__30) | (1L << T__31))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int1Context : ParserRuleContext {
		public Int1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int1; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterInt1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitInt1(this);
		}
	}

	[RuleVersion(0)]
	public Int1Context int1() {
		Int1Context _localctx = new Int1Context(Context, State);
		EnterRule(_localctx, 54, RULE_int1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int2Context : ParserRuleContext {
		public Int2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterInt2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitInt2(this);
		}
	}

	[RuleVersion(0)]
	public Int2Context int2() {
		Int2Context _localctx = new Int2Context(Context, State);
		EnterRule(_localctx, 56, RULE_int2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionBContext : ParserRuleContext {
		public ConditionBContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionB; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterConditionB(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitConditionB(this);
		}
	}

	[RuleVersion(0)]
	public ConditionBContext conditionB() {
		ConditionBContext _localctx = new ConditionBContext(Context, State);
		EnterRule(_localctx, 58, RULE_conditionB);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionBContext : ParserRuleContext {
		public DirectionBContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directionB; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterDirectionB(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitDirectionB(this);
		}
	}

	[RuleVersion(0)]
	public DirectionBContext directionB() {
		DirectionBContext _localctx = new DirectionBContext(Context, State);
		EnterRule(_localctx, 60, RULE_directionB);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			_la = TokenStream.La(1);
			if ( !(_la==T__46 || _la==T__47) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 62, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; Match(T__48);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitFor(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(Context, State);
		EnterRule(_localctx, 64, RULE_for);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(T__49);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScanCommandContext : ParserRuleContext {
		public ScanCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scanCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterScanCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitScanCommand(this);
		}
	}

	[RuleVersion(0)]
	public ScanCommandContext scanCommand() {
		ScanCommandContext _localctx = new ScanCommandContext(Context, State);
		EnterRule(_localctx, 66, RULE_scanCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScanCommand2Context : ParserRuleContext {
		public ScanCommand2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scanCommand2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterScanCommand2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitScanCommand2(this);
		}
	}

	[RuleVersion(0)]
	public ScanCommand2Context scanCommand2() {
		ScanCommand2Context _localctx = new ScanCommand2Context(Context, State);
		EnterRule(_localctx, 68, RULE_scanCommand2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 70, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			_la = TokenStream.La(1);
			if ( !(_la==T__58 || _la==T__59) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BarrierContext : ParserRuleContext {
		public BarrierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_barrier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterBarrier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitBarrier(this);
		}
	}

	[RuleVersion(0)]
	public BarrierContext barrier() {
		BarrierContext _localctx = new BarrierContext(Context, State);
		EnterRule(_localctx, 72, RULE_barrier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_la = TokenStream.La(1);
			if ( !(_la==T__60 || _la==T__61) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRobotListener typedListener = listener as IRobotListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 74, RULE_int);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x43\xD7\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x3\x2\x6\x2P\n\x2\r"+
		"\x2\xE\x2Q\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x5\x3\x61\n\x3\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\n"+
		"\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3"+
		"\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10"+
		"\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17"+
		"\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C"+
		"\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3"+
		"#\x3#\x3$\x3$\x3%\x3%\x3&\x3&\x3\'\x3\'\x3\'\x2\x2(\x2\x4\x6\b\n\f\xE"+
		"\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42"+
		"\x44\x46HJL\x2\x10\x3\x2\x3\x6\x3\x2\a\n\x3\x2\v\f\x3\x2\r\x10\x3\x2\x11"+
		"\x14\x3\x2\x17\x1A\x3\x2 \"\x3\x2#,\x3\x2-\x30\x3\x2\x31\x32\x3\x2\x35"+
		"\x38\x3\x2\x39<\x3\x2=>\x3\x2?@\xBD\x2O\x3\x2\x2\x2\x4`\x3\x2\x2\x2\x6"+
		"\x62\x3\x2\x2\x2\b\x65\x3\x2\x2\x2\ng\x3\x2\x2\x2\fm\x3\x2\x2\x2\xEo\x3"+
		"\x2\x2\x2\x10r\x3\x2\x2\x2\x12t\x3\x2\x2\x2\x14w\x3\x2\x2\x2\x16y\x3\x2"+
		"\x2\x2\x18\x7F\x3\x2\x2\x2\x1A\x81\x3\x2\x2\x2\x1C\x84\x3\x2\x2\x2\x1E"+
		"\x8B\x3\x2\x2\x2 \x8E\x3\x2\x2\x2\"\x91\x3\x2\x2\x2$\xA2\x3\x2\x2\x2&"+
		"\xAC\x3\x2\x2\x2(\xAF\x3\x2\x2\x2*\xB2\x3\x2\x2\x2,\xB4\x3\x2\x2\x2.\xB6"+
		"\x3\x2\x2\x2\x30\xB8\x3\x2\x2\x2\x32\xBA\x3\x2\x2\x2\x34\xBC\x3\x2\x2"+
		"\x2\x36\xBE\x3\x2\x2\x2\x38\xC0\x3\x2\x2\x2:\xC2\x3\x2\x2\x2<\xC4\x3\x2"+
		"\x2\x2>\xC6\x3\x2\x2\x2@\xC8\x3\x2\x2\x2\x42\xCA\x3\x2\x2\x2\x44\xCC\x3"+
		"\x2\x2\x2\x46\xCE\x3\x2\x2\x2H\xD0\x3\x2\x2\x2J\xD2\x3\x2\x2\x2L\xD4\x3"+
		"\x2\x2\x2NP\x5\x4\x3\x2ON\x3\x2\x2\x2PQ\x3\x2\x2\x2QO\x3\x2\x2\x2QR\x3"+
		"\x2\x2\x2R\x3\x3\x2\x2\x2S\x61\x5\x6\x4\x2T\x61\x5\n\x6\x2U\x61\x5\xE"+
		"\b\x2V\x61\x5\x16\f\x2W\x61\x5\x1C\xF\x2X\x61\x5\x1A\xE\x2Y\x61\x5\x12"+
		"\n\x2Z\x61\x5\x1E\x10\x2[\x61\x5$\x13\x2\\\x61\x5 \x11\x2]\x61\x5\"\x12"+
		"\x2^\x61\x5&\x14\x2_\x61\x5(\x15\x2`S\x3\x2\x2\x2`T\x3\x2\x2\x2`U\x3\x2"+
		"\x2\x2`V\x3\x2\x2\x2`W\x3\x2\x2\x2`X\x3\x2\x2\x2`Y\x3\x2\x2\x2`Z\x3\x2"+
		"\x2\x2`[\x3\x2\x2\x2`\\\x3\x2\x2\x2`]\x3\x2\x2\x2`^\x3\x2\x2\x2`_\x3\x2"+
		"\x2\x2\x61\x5\x3\x2\x2\x2\x62\x63\x5\b\x5\x2\x63\x64\b\x4\x1\x2\x64\a"+
		"\x3\x2\x2\x2\x65\x66\t\x2\x2\x2\x66\t\x3\x2\x2\x2gh\x5\f\a\x2hi\x5.\x18"+
		"\x2ij\x5L\'\x2jk\x5\x30\x19\x2kl\b\x6\x1\x2l\v\x3\x2\x2\x2mn\t\x3\x2\x2"+
		"n\r\x3\x2\x2\x2op\x5\x10\t\x2pq\b\b\x1\x2q\xF\x3\x2\x2\x2rs\t\x4\x2\x2"+
		"s\x11\x3\x2\x2\x2tu\x5\x14\v\x2uv\b\n\x1\x2v\x13\x3\x2\x2\x2wx\t\x5\x2"+
		"\x2x\x15\x3\x2\x2\x2yz\x5\x18\r\x2z{\x5.\x18\x2{|\x5L\'\x2|}\x5\x30\x19"+
		"\x2}~\b\f\x1\x2~\x17\x3\x2\x2\x2\x7F\x80\t\x6\x2\x2\x80\x19\x3\x2\x2\x2"+
		"\x81\x82\a\x42\x2\x2\x82\x83\b\xE\x1\x2\x83\x1B\x3\x2\x2\x2\x84\x85\x5"+
		".\x18\x2\x85\x86\x5\x44#\x2\x86\x87\x5H%\x2\x87\x88\x5J&\x2\x88\x89\x5"+
		"\x30\x19\x2\x89\x8A\b\xF\x1\x2\x8A\x1D\x3\x2\x2\x2\x8B\x8C\x5@!\x2\x8C"+
		"\x8D\b\x10\x1\x2\x8D\x1F\x3\x2\x2\x2\x8E\x8F\x5\x42\"\x2\x8F\x90\b\x11"+
		"\x1\x2\x90!\x3\x2\x2\x2\x91\x92\x5.\x18\x2\x92\x93\x5\x36\x1C\x2\x93\x94"+
		"\x5\x32\x1A\x2\x94\x95\x5\x38\x1D\x2\x95\x96\x5\x34\x1B\x2\x96\x97\x5"+
		"\x36\x1C\x2\x97\x98\x5<\x1F\x2\x98\x99\x5:\x1E\x2\x99\x9A\x5\x34\x1B\x2"+
		"\x9A\x9B\x5\x36\x1C\x2\x9B\x9C\x5> \x2\x9C\x9D\x5\x30\x19\x2\x9D\x9E\a"+
		"\x15\x2\x2\x9E\x9F\x5\x2\x2\x2\x9F\xA0\a\x16\x2\x2\xA0\xA1\b\x12\x1\x2"+
		"\xA1#\x3\x2\x2\x2\xA2\xA3\x5.\x18\x2\xA3\xA4\x5\x46$\x2\xA4\xA5\x5H%\x2"+
		"\xA5\xA6\x5J&\x2\xA6\xA7\x5\x30\x19\x2\xA7\xA8\a\x15\x2\x2\xA8\xA9\x5"+
		"\x2\x2\x2\xA9\xAA\a\x16\x2\x2\xAA\xAB\b\x13\x1\x2\xAB%\x3\x2\x2\x2\xAC"+
		"\xAD\x5*\x16\x2\xAD\xAE\b\x14\x1\x2\xAE\'\x3\x2\x2\x2\xAF\xB0\x5,\x17"+
		"\x2\xB0\xB1\b\x15\x1\x2\xB1)\x3\x2\x2\x2\xB2\xB3\t\a\x2\x2\xB3+\x3\x2"+
		"\x2\x2\xB4\xB5\a\x1B\x2\x2\xB5-\x3\x2\x2\x2\xB6\xB7\a\x1C\x2\x2\xB7/\x3"+
		"\x2\x2\x2\xB8\xB9\a\x1D\x2\x2\xB9\x31\x3\x2\x2\x2\xBA\xBB\a\x1E\x2\x2"+
		"\xBB\x33\x3\x2\x2\x2\xBC\xBD\a\x1F\x2\x2\xBD\x35\x3\x2\x2\x2\xBE\xBF\t"+
		"\b\x2\x2\xBF\x37\x3\x2\x2\x2\xC0\xC1\t\t\x2\x2\xC1\x39\x3\x2\x2\x2\xC2"+
		"\xC3\t\t\x2\x2\xC3;\x3\x2\x2\x2\xC4\xC5\t\n\x2\x2\xC5=\x3\x2\x2\x2\xC6"+
		"\xC7\t\v\x2\x2\xC7?\x3\x2\x2\x2\xC8\xC9\a\x33\x2\x2\xC9\x41\x3\x2\x2\x2"+
		"\xCA\xCB\a\x34\x2\x2\xCB\x43\x3\x2\x2\x2\xCC\xCD\t\f\x2\x2\xCD\x45\x3"+
		"\x2\x2\x2\xCE\xCF\t\r\x2\x2\xCFG\x3\x2\x2\x2\xD0\xD1\t\xE\x2\x2\xD1I\x3"+
		"\x2\x2\x2\xD2\xD3\t\xF\x2\x2\xD3K\x3\x2\x2\x2\xD4\xD5\t\t\x2\x2\xD5M\x3"+
		"\x2\x2\x2\x4Q`";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
